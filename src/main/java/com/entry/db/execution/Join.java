package com.entry.db.execution;

import com.entry.db.common.DbException;
import com.entry.db.common.Type;
import com.entry.db.storage.Tuple;
import com.entry.db.storage.TupleDesc;
import com.entry.db.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate predicate;
    private OpIterator child1;
    private OpIterator child2;

    private Tuple leftTuple;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.predicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     * alias or table name.
     */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(predicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     * alias or table name.
     */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     * implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc td1 = child1.getTupleDesc();
        TupleDesc td2 = child2.getTupleDesc();
        int numFields = td1.numFields() + td2.numFields();
        Type[] types = new Type[numFields];
        String[] names = new String[numFields];
        int idx = 0;
        for (int i = 0; i < td1.numFields(); i++) {
            types[idx] = td1.getFieldType(i);
            names[idx] = td1.getFieldName(i);
            idx++;
        }
        for (int i = 0; i < td2.numFields(); i++) {
            types[idx] = td2.getFieldType(i);
            names[idx] = td2.getFieldName(i);
            idx++;
        }
        return new TupleDesc(types, names);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
        leftTuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        leftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        // TODO: we use the nest loop join as the first implement. we can use more effective solution the solve the problem
        while (leftTuple != null || child1.hasNext()) {
            if (leftTuple == null) {
                leftTuple = child1.next();
                // start from the beginning offset
                child2.rewind();
            }
            while (child2.hasNext()) {
                Tuple rightTuple = child2.next();
                if (predicate.filter(leftTuple, rightTuple)) {
                    // merge leftTuple and rightTuple
                    TupleDesc td = getTupleDesc();
                    Tuple mergeTuple = new Tuple(td);
                    int idx = 0;
                    for (int i = 0; i < leftTuple.getTupleDesc().numFields(); i++) {
                        mergeTuple.setField(idx++, leftTuple.getField(i));
                    }
                    for (int i = 0; i < rightTuple.getTupleDesc().numFields(); i++) {
                        mergeTuple.setField(idx++, rightTuple.getField(i));
                    }
                    return mergeTuple;
                }
            }
            leftTuple = null;
        }
        // no match tuple
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
